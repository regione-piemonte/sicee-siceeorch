<?xml version="1.0" encoding="UTF-8"?>
<!--

        build.xml file per compilazione, rilascio e deploy. del

        Per una lista completa dei tasks eseguibili usare l'argomento di
        ant -projecthelp quando si richiama questo build.xml.

-->

<project name="siceeorch" xmlns:ivy="antlib:fr.jayasoft.ivy.ant" default="default" basedir=".">
	<description>Build file di progetto</description>

	<echo message="Loading build properties..." />
	<property file="buildfiles/build.properties"/>
	<property file="buildfiles/build.locale.properties"  />
	<property file="buildfiles/${target}.properties"/>	

	<path id="library.ref">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<path id="weblogic.ref">
		<pathelement location="${application.server.jar}" />
	</path>


	<target name="default" description="Eseguire il build per 
		l'environment specificato a linea di comando con -Dtarget=${target}
		o per tutti gli environment (se non specificato).">

		<condition property="first-call" value="distribution">
			<not>
				<equals arg1="${target}" arg2="$${target}" />
			</not>
		</condition>

		<condition property="first-call" value="all-targets">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>

		<echo message="target: ${target}" />
		<echo message="first-call: ${first-call}" />

		<antcall target="clean-all" />
		<antcall target="${first-call}" />
	</target>



	<!-- -->
	<!-- ############################################################ -->
	<!-- # preparazione artefatto per il deploy su repart           # --> 
	<!-- # (in dist/${target})                                      # -->
	<!-- ############################################################ -->
	<target name="package-deployable-artifact" depends="environment-config, _package-csiclientlibs-jar">
		<mkdir dir="dist/csipiemonte"/>

		<!-- artefatto per il servizio siceeorch -->
		<mkdir dir="dist/csipiemonte/siceeorch-siceeorch-client/6.1.0"/>
		<mkdir dir="dist/csipiemonte/siceeorch-siceeorch-client/6.1.0/lib/"/>
		<copydir dest="dist/csipiemonte/siceeorch-siceeorch-client/6.1.0/lib" src="build/archives/${target}" includes="siceeorch-siceeorch-client-6.1.0.jar"></copydir>
		<copy file="build/temp/artifactory/siceeorch/ivy-siceeorch-siceeorch-client.xml" todir="dist/csipiemonte/siceeorch-siceeorch-client/6.1.0"></copy>

		<zip destfile="dist/sicee-siceeorch-artifacts.zip" basedir="dist" includes="csipiemonte/**">
		</zip>
	</target>


	<target name="all-targets" description="Esegue il build per le varie distribuzioni in sequenza.">
	<!--PROTECTED REGION ID(R-312021802) ENABLED START-->
		<!-- inserire il richiamo dei build per gli ambienti previsti dal progetto -->
		<antcall target="distribution">
			<param name="target" value="dev" />
		</antcall>

		<antcall target="distribution">
			<param name="target" value="tst-[cliente]" />
		</antcall>

		<antcall target="distribution">
			<param name="target" value="coll-[cliente]" />
		</antcall>

		<antcall target="distribution">
			<param name="target" value="prod-[cliente]" />
		</antcall>
	<!--PROTECTED REGION END-->
	</target>


	<target name="package-all" description="esegue il packaging di ogni componente del prodotto" >
		<antcall target="package-ear" />
	</target>

	<target name="init" description="Inizializza lo script Ant.">
		<tstamp />
		<condition property="target" value="dev">
			<equals arg1="${target}" arg2="$${target}" />
		</condition>
		<mkdir dir="${build}/classes" />
		
		<mkdir dir="${build}/temp/${target}/lib" />
		<mkdir dir="${build}/archives/${target}" />
		
		<mkdir dir="${dist}/${target}" />
		<mkdir dir="${build}/javadoc" />
		<mkdir dir="${build}/jsp" />
	</target>


    
	<target name="resolve-dependencies" description="carica le librerie dal repository remoto">
		<ivy:configure file="buildfiles/ivyconf.xml" />
		<ivy:resolve file="buildfiles/ivy.xml" />
	</target>

	<!-- caricamento delle dipendenze mediante Ivy 2.0.0
	     in conformita' con le Linee Guida Build V05
	 -->
	<target name="load-dependencies" depends="resolve-dependencies"
			description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="lib/[artifact].[type]" />
	</target>


    <!-- compilazione dei sorgenti java. N.B: le classi di "frontiera" devono
         essere compilate con target JDK1.3 per permettere la fruibilita' del
         servizio da parte di fruitori che utilizzano JRE anteriori all'1.5.
     -->
	<target name="compile-all" description="Compila tutti i sorgenti."
		depends="init, load-dependencies" >

		<echo message="===> Target: ${target}" />		
		
		<!-- compilazione dei sorgenti delle interfacce (target 1.3)-->
		<javac srcdir="${src}/java" 
			destdir="${build}/classes" 
			optimize="on" 
			deprecation="on"
			compiler="modern"
			target="1.3"
			source="1.3"
			includes="it/csi/**/interfacecsi/**,it.csi/**/dto/**,it/csi/**/exception/**"
			>
			<classpath refid="library.ref"/>
		</javac>
		
		<!-- compilazione degli altri sorgenti -->
		<javac srcdir="${src}/java" 
			destdir="${build}/classes" 
			optimize="on" 
			deprecation="on"
			compiler="modern"
			debug="on" debuglevel="lines,vars,source"
			excludes="it/csi/**/interfacescsi/**,it/csi/**/entity/**,it/csi/**/exception/**"
			>
			<classpath refid="library.ref"/>
		</javac>

		<!-- compilazione delle classi di test -->
		<javac srcdir="${test}/java" 
			destdir="${build}/classes" 
			optimize="on" 
			deprecation="on"
			compiler="modern"
			debug="on" debuglevel="lines,vars,source"
			>
			<classpath refid="library.ref"/>
		</javac>
		
		<copy todir="${build}/classes">
			<fileset dir="${src}/java" excludes="**/*.java*,**/*.jbx*"/>
		</copy>
		
		<copy todir="${build}/classes">
   			<fileset dir="${test}/java" excludes="**/*.java*,**/*.jbx*"/>
		</copy>

	</target>

	<!-- creazione pacchetto classi/risorse comuni a tutti i servizi -->
    <target name="_package-common-classes" depends="compile-all">
    	<jar destfile="${build}/archives/${target}/siceeorch-common.jar"
			basedir="${build}/classes"
			includes="it/csi/sicee/siceeorch/business/**">
			<exclude name="it/csi/sicee/siceeorch/business/siceeorch/**" />
		</jar>
    </target>
    
    <target name="_package-csiclientlibs-jar" depends="compile-all" 
    description="costruisce tutti i jar delle librerie client di CSI per ogni servizio"
    >
       
       <!-- costruzione delle librerie client per il servizio siceeorch -->
       <antcall target="_csiclientlib-jar">
         <param name="service.name" value="siceeorch" />
         <param name="service.ver" value="6.1" />
       </antcall>
       
    </target>
    
    <target name="_csiclientlib-jar" description="genera le librerie client di ciascun servizio">
    	<!-- prende come parametro il codice servizio service.name e la versione service.ver (deve essere a 2 cifre!!!) -->
    	<jar destfile="${build}/archives/${target}/siceeorch-${service.name}-client-${service.ver}.0.jar"
			basedir="${build}/classes"
			includes="it/csi/sicee/siceeorch/dto/${service.name}/**,
			          it/csi/sicee/siceeorch/exception/${service.name}/**,
			          it/csi/sicee/siceeorch/interfacecsi/${service.name}/**">
		</jar>
    </target>
	

	<target name="environment-config" description="Predispone le configurazioni dipendenti dall'ambiente.">
		<copy todir="build/temp" overwrite="true">
			<fileset file="${conf}/ear/*.xml" />
		</copy>
		
		<copy todir="build/temp" overwrite="true">
			<fileset file="${conf}/**" />
		</copy>
		
		
		<replace dir="${build}/temp/ejb" token="@iridev2.iridepep.iridepep.pa.url@"  value="${iridev2.iridepep.iridepep.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@ctserv.ctserv.ctservtopon.pa.url@"  value="${ctserv.ctserv.ctservtopon.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@tope.tope.topelmamm.pa.url@"  value="${tope.tope.topelmamm.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@tavt.tavt.tavt.pa.url@"  value="${tavt.tavt.tavt.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@tope.tope.topetopo.pa.url@"  value="${tope.tope.topetopo.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@index.ecmengine.indexmngmt.pa.url@"  value="${index.ecmengine.indexmngmt.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@index.ecmengine.indexsearch.pa.url@"  value="${index.ecmengine.indexsearch.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@sicee.siceesrv.siceesrv.pa.url@"  value="${sicee.siceesrv.siceesrv.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@index.ecmengine.indexsecurity.pa.url@"  value="${index.ecmengine.indexsecurity.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@doqui.dosign.verificamarcafirma.pa.url@"  value="${doqui.dosign.verificamarcafirma.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@mdpnew.mdpcoreservices.mdpnew.pa.url@"  value="${mdpnew.mdpcoreservices.mdpnew.pa.url}"/>

		<replace dir="${build}/temp/ejb" token="@sigit.sigitext.sigitext.pa.url@"  value="${sigit.sigitext.sigitext.pa.url}"/>

		
		
			
	<if>
 		<equals arg1="${enableClustering}" arg2="true" />
 	<then>
	    <replace dir="${build}/temp/ejb" token="@@@@CLUSTER_AWARE@@@@"  value="&lt;clustered&gt;True&lt;/clustered&gt;">
		    <include name="**/jboss*.xml"/>
  		</replace>	
  	</then>	
  	<else>
  		<replace dir="${build}/temp/ejb" token="@@@@CLUSTER_AWARE@@@@"  value="">
		    <include name="**/jboss*.xml"/>
  		</replace>
  	</else>
  	</if>	

		
		
		<!--PROTECTED REGION ID(R-500117444) ENABLED START-->
		<!-- <replace dir="${build}/temp/ejb" token="@sigit.sigitext.password@"  value="${sigit.sigitext.password}"/> -->
		<replace dir="${build}/temp/ejb" token="@mpdnew.core.url@"  value="${mpdnew.core.url}"/>
		<replace dir="${build}/temp/ejb" token="@mpdnew.iuv.url@"  value="${mpdnew.iuv.url}"/>
		<replace dir="${build}/temp/ejb" token="@sigitext.wsdl.url@"  value="${sigitext.wsdl.url}"/>
		<!--PROTECTED REGION END-->
		
	</target>

	
    
    <target name="_package-all-soappabr-wars">
    
    	
    	
    	
    
    </target>
    
    <target name="_package-soappabr-war" >
      <!-- prende in input i parametri component.name service.name binding.code -->
      <mkdir dir="${temp}/${binding.code}/${service.name}/WEB-INF" />
         
		<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
             webxml="${conf}/web/${binding.code}/${service.name}/WEB-INF/web.xml" 
			 roundup= "false">
			 <webinf file="${conf}/web/${binding.code}/${service.name}/WEB-INF/deploysoapejb*.xml" />
			 <webinf file="${conf}/web/${binding.code}/${service.name}/WEB-INF/jboss-web.xml" />
			 <webinf file="${conf}/web/${binding.code}/${service.name}/WEB-INF/weblogic.xml" />
		</war>
    </target>

    <!-- costruisce i war dei wsfad -->
    <target name="_package-all-wsfad-wars">
    
    	
    	
    	
    
    </target>
    
    <target name="_package-wsfad-war" >
      <!-- prende in input i parametri component.name service.name binding.code -->
      <mkdir dir="${temp}/${binding.code}/${service.name}/WEB-INF" />
         
		<war destfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.code}.war"
             webxml="${conf}/web/${binding.code}/${service.name}/WEB-INF/web.xml" 
			 roundup= "false">
			 <webinf file="${conf}/web/${binding.code}/${service.name}/WEB-INF/server-config.wsdd" />
			 <webinf file="${conf}/web/${binding.code}/${service.name}/WEB-INF/jboss-web.xml" />
			 <webinf file="${conf}/web/${binding.code}/${service.name}/WEB-INF/weblogic.xml" />
			 <classes dir="${src}/web/${binding.code}/${service.name}" 
				includes="defpdelegata_embedded*.xml" />
			<lib dir="${lib}" includes="${wsfad.libs}" />
			<fileset dir="${src}/web/${binding.code}/${service.name}" includes="**">			
			</fileset>
		</war>
    </target>
    
    
    <!-- costruisce tutti gli ejb jar relativi alle PA ejb (1 per servizio esposto)-->
    <target name="_ejbpa-ejb-jars" depends="compile-all">
    	
    	<!-- binding ejb del servizio siceeorch -->
    	
	
        <!-- costruzione dell'ejb-jar del binding siceeorch.ejbpa -->
		<antcall target="_ejbpa-ejb-jar">
    	    <param name="service.name" value="siceeorch" />
    		<param name="service.version" value="6.1" />
    		<param name="binding.name" value="ejbpa" />
    		<param name="service.type" value="orch" />
    	</antcall>
	


	
    </target>
	
	
	<target name="_ejbpa-ejb-jar" description="Genera il jar per la PA ejb di servizi APPL o INFR" >
	    <!-- prende come parametro il codice del servizio e del binding -->
	    <!-- service.name -->
	    <!-- service.version (serve per il rif. al client jar)-->
	    <!-- service.type ("orch", "other-than-orch") -->
	    <!-- binding.name -->
		
        
        <if>
 			<equals arg1="${service.type}" arg2="orch" />
 		<then>
			<jar jarfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.name}.jar" >
				<fileset dir="${build}/classes">
					<include name="it/csi/*/siceeorch/business/${service.name}/**"/>
					<include name="it/csi/*/siceeorch/integration/${service.name}/**"/>
				</fileset>						

				<fileset dir="${conf}/ejb/${service.name}">
					<include name="defpa*"/>
					<include name="checked_resources*.xml"/>
					<include name="defqmgr_*" />
				</fileset>
			
				<!-- config. svcflow -->
				<fileset dir="${conf}/orchestrator/descriptor/${service.name}">
					<include name="*.xml"/>
				</fileset>
			
				<!-- risorse soggette a sostituzione -->
				<fileset dir="${build}/temp/ejb/${service.name}">
					<include name="**/*.xml"/>
					<include name="**/*.properties"/>
				</fileset>		
								
			    <metainf dir="${build}/temp/ejb/${service.name}/META-INF" >
					<patternset id="all-xml" >
						<include name="**/*.xml"/>
					</patternset>
				</metainf>	
			</jar>
		</then>
		<else>
			<jar jarfile="${build}/archives/${target}/${service.type}-${service.name}-${binding.name}.jar" >
				<fileset dir="${build}/classes">
					<include name="it/csi/*/siceeorch/business/${service.name}/**"/>
					<include name="it/csi/*/siceeorch/integration/${service.name}/**"/>
				</fileset>						
						
				<!-- risorse soggette a sostituzione -->
				<fileset dir="${temp}/ejb/${service.name}">
					<include name="*.xml"/>
					<include name="*.properties"/>
				</fileset>
				
				<metainf dir="${temp}/ejb/${service.name}/META-INF" >
					<patternset id="all-xml" >
						<include name="**/*.xml"/>
					</patternset>
				</metainf>
				
			</jar>		
		</else>
		</if>
	</target>


	<target name="_orch_ejbpa-ejb-jar" description="Genera il jar per la PA ejb di servizi ORCH" >
	    <!-- prende come parametro il codice del servizio e del binding -->
	    <!-- service.name -->
	    <!-- service.version (serve per il rif. al client jar)-->
	    <!-- binding.name -->
		
        
		<jar jarfile="${build}/archives/${target}/orch-${service.name}${binding.name}ejb.jar" >
			<fileset dir="${build}/classes">
				<include name="it/csi/*/siceeorch/business/${service.name}/**"/>
				<include name="it/csi/*/siceeorch/integration/${service.name}/**"/>
			</fileset>						

			<fileset dir="${conf}/ejb/${service.name}">
				<include name="defpa*"/>
				<include name="checked_resources*.xml"/>
				<include name="defqmgr_*" />
			</fileset>
			
			<!-- config. svcflow -->
			<fileset dir="${conf}/orchestrator/descriptor/${service.name}">
				<include name="*.xml"/>
			</fileset>
			
			<metainf dir="${conf}/ejb/${service.name}/META-INF" >
				<patternset id="all-xml" >
					<include name="**/*.xml"/>
				</patternset>
			</metainf>
		</jar>
	</target>

	<target name="integration-jar" description="Genera il jar per lo strato integration." >

		<copy todir="${build}/classes/it/csi/${project}/integration/services/iride" file="${conf}/pd/iride/defPDIrideEJB.xml" />
		<replace file="${build}/classes/it/csi/${project}/integration/services/iride/defPDIrideEJB.xml" token="@IRIDE_URL@" value="${iride.url.t3}" />
			
		<jar jarfile="${build}/archives/${target}/integration.jar">
			<fileset dir="${build}/classes">
				<include name="it/csi/${project}/integration/**"/>
			</fileset>
			
			<manifest>
					<attribute name="Class-Path" value="commons.jar lib/util-perf-1.0.0.jar"/>
			</manifest>
		</jar>
	</target>

	
	<target name="package-ear"  description="costruisce l&apos;ear"  
		depends="compile-all, environment-config, _package-common-classes, _package-csiclientlibs-jar, _ejbpa-ejb-jars, _package-all-soappabr-wars, _package-all-wsfad-wars">

		<copy todir="${temp}/${target}/lib">
		    <!-- librerie infrastrutturali o client di servizi fruiti -->
			<fileset dir="${lib}"
				includes="${app.support.libs} ${svcflow.libs} ${extra.app.libs} ${cooptrace.libs} "
				excludes="${excludes.libs}"
			/>
			<fileset dir="${build}/archives/${target}" includes="*client*.jar *common.jar" />
		</copy>

		<ear appxml="${temp}/application.xml" destfile="${build}/archives/${target}/siceeorch.ear">
			<fileset dir="${build}/archives/${target}" includes="*.jar,*.war, *.sar" excludes="*client*.jar,*-common.jar"/>
			<fileset dir="${temp}/${target}" >
				<include name="**/*"/>
			</fileset>
			<fileset dir="${temp}/ear" >
				<include name="META-INF/*"/>
			</fileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />

			</manifest>
		</ear>
	</target>


	<target name="distribution" description="Costruisce il tar per la distribuzione." 
		depends="package-all">

		<echo>====== Creating distribution for ${target} ...</echo>
		<echo>====== Basedir: ${build}/archives/${target} ... </echo>
<!--PROTECTED REGION ID(R-1719948227) ENABLED START-->
		<!-- inserire qui eventuali statement antcall aggiuntivi da invocare
		     nel processo di distribuzione del tar -->
		
<!--PROTECTED REGION END-->

		<!-- Configurazione del registry -->
		<antcall target="_configure-registry"/>

		<!-- creazione pacchetto distribution -->
		<tar tarfile="${dist}/${target}/${project}-${version}.tar" 
	         basedir="${build}/archives/${target}"
	         includes="*.ear,*.zip" >
			<tarfileset dir="buildfiles">
				<include name="readme.txt"/>
				<!--PROTECTED REGION ID(R-1199002541) ENABLED START-->
			<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
			<!--PROTECTED REGION END-->
			</tarfileset>
			<tarfileset dir="${temp}/tar">
				<include name="readme.txt"/>
				<!--PROTECTED REGION ID(R2109731048) ENABLED START-->
				<!-- inserire qui eventuali statement per includere oggetti extra nel tar -->
				<!--PROTECTED REGION END-->
			</tarfileset>
		</tar>

		<delete>
			<fileset dir="${dist}/${target}" excludes="**/*.tar" />
		</delete>

	</target>


	
	<!-- clean targets -->
	
	<target name="clean-all"
	    	description="Rimuove tutte le cartelle temporanee."
    	depends="clean-archives, clean-cache, clean-classes, clean-dist, clean-javadoc, clean-temp"/>

	<target name="clean-cache"
	    	description="Rimuove la cartella di cache di Ivy e la lib.">

		<delete dir="${build}/cache" />
		<delete dir="lib" />

	</target>

	<target name="clean-temp"
    		description="Rimuove la cartella dei files temporanei di build.">

		<delete dir="${temp}" />

	</target>


	<target name="clean-archives"
	    	description="Rimuove la cartella degli archivi (war, ear, ...).">

		<delete dir="${build}/archives"/>

	</target>

	<target name="clean-dist"
	    	description="Rimuove la cartella delle distribuzioni.">

		<delete dir="${dist}"/>

	</target>



	<target name="clean-classes"
	    	description="Rimuove la cartella dei sorgenti compilati.">

		<delete dir="${build}/classes"/>

	</target>


	<target name="clean-javadoc"
			description="Rimuove la cartella temporanea dei javadoc.">

		<delete dir="${build}/javadoc"/>

	</target>


	

	<target name="_clean-web-inf"
			description="Rimuove il contenuto di lib e classes della web application (per run locali).">

		<delete dir="${web}/WEB-INF/classes" />
		<delete dir="${web}/WEB-INF/lib" />

	</target>


	<!-- imported tasks from other files -->

	<target name="javadoc" depends="init"
    		description="Genera la documentazione javadoc.">

		<ant antfile="buildfiles/build.javadoc.xml" target="javadoc"/>

	</target>


	<!--<target name="_copy-to-web-inf"
			description="Copia le classi e la lib sotto WEB-INF (per run locali)."
                        depends="_clean-web-inf, compile-all">

		<copy todir="${web}/web/samplecsi/WEB-INF/classes">
			<fileset dir="${build}/classes">
				<include name="**/*"/>
			</fileset>
		</copy>

		<copy todir="${src}/web/samplecsi/WEB-INF/lib">
			<fileset dir="${lib}">
				<exclude name="weblogic*.jar"/>
			</fileset>
		</copy>

	</target>-->


	<target name="about" description="Visualizza l'elenco dei target pubblici dello script." >
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about" srcfile="buildfiles/about.txt" />
		<echo message="${about}" />
	</target>

	<target name="about-custom" description="Visualizza l'elenco di tutti i target, pubblici e privati (equivalente a 'ant -projecthelp')">
		<loadproperties srcfile="buildfiles/build.properties" />
		<loadfile property="about-custom" srcfile="buildfiles/about-custom.txt" />
		<echo message="${about-custom}" />
		<java classname="org.apache.tools.ant.Main">
			<arg value="-projecthelp" />
		</java>
	</target>

	<target name="show-vars" depends="init"
	          description="Visualizza tutte le variabili impostate nei file di properties e/o da linea di comando">
		<echo message="*****************************************"/>
		<echo message="********  ${project} environment  *******" />
		<echo message="*****************************************"/>
		<echoproperties />
		<echo />
		<echo />
		<echo message="*****************************************"/>
		<echo message="********    java properties      *******" />
		<echo message="*****************************************"/>
		<echoproperties prefix="java."/>

	</target>

	<target name="__download-libs">
		<delete dir="lib" />
		<antcall target="load-dependencies" />
	</target>


	<!-- Configurazione registry -->
	<target name="_configure-registry">
		<!-- sostituisce le variabili -->
		<antcall target="_replace-registry-vars" />
		
		<!-- REGISTRY -->		
		<zip destfile="${build}/archives/${target}/${project}-reg-${version}.zip">
			<zipfileset dir="${temp}/registry">
				<include name="*/**"/>
			</zipfileset>
		</zip>

		<!-- DIAG -->
		<zip destfile="${build}/archives/${target}/diag-${project}-${version}.zip">
			<zipfileset dir="${temp}/diag">
				<include name="**/*.properties"/>
			</zipfileset>
		</zip>

		<!-- MONIT -->
		<zip destfile="${build}/archives/${target}/monit-${project}-${version}.zip">
			<zipfileset dir="${temp}/monit">
				<include name="**/*.properties"/>
			</zipfileset>
		</zip>
	</target>

	<target name="_replace-registry-vars">
		<!-- REGISTRY -->
		<replace dir="${temp}/registry">
			<replacefilter token="@rilascio.ambiente@" value="${rilascio.ambiente}"/>
			<replacefilter token="@rilascio.cliente@" value="${rilascio.cliente}"/>
			<replacefilter token="@rilascio.istanza@" value="${rilascio.istanza}"/>
			<replacefilter token="@prodotto.descrizione@" value="${prodotto.descrizione}"/>
			<replacefilter token="@componente.descrizione@" value="${componente.descrizione}"/>
			<replacefilter token="@sicee.siceeorch.siceeorch.pa.url@" value="${sicee.siceeorch.siceeorch.pa.url}"/>
		</replace>	

		<!-- DIAG -->
		<replace dir="${temp}/diag">
			<replacefilter token="@rilascio.ambiente@" value="${rilascio.ambiente}"/>
			<replacefilter token="@rilascio.cliente@" value="${rilascio.cliente}"/>
			<replacefilter token="@rilascio.istanza@" value="${rilascio.istanza}"/>
		</replace>

		<!-- MONIT -->
		<replace dir="${temp}/monit">
			<replacefilter token="@rilascio.ambiente@" value="${rilascio.ambiente}"/>
			<replacefilter token="@rilascio.cliente@" value="${rilascio.cliente}"/>
			<replacefilter token="@rilascio.istanza@" value="${rilascio.istanza}"/>
		</replace>
	</target>


    <taskdef resource="net/sf/antcontrib/antlib.xml"/>


    <!--PROTECTED REGION ID(R-1861527449) ENABLED START-->
    <!-- inserire qui eventuali target extra -->
	
    <!--PROTECTED REGION END-->
</project>
